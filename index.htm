<!DOCTYPE html>
<html>
<head>
    <title>Blanket Pattern Designer</title>
    <style>
        .settings-box {
            border: 2px solid #ccc;
            padding: 20px;
            border-radius: 10px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            width: max-content;
            margin: auto;
        }
        .settings-box label {
            margin-right: 10px;
        }
        .settings-box input[type="number"] {
            width: 50px; /* You can adjust the width as per your need */
        }
        /* Basic styling for the grid */
        .grid {
            display: grid;
            background-color: #ccc;
            /* Adjust grid size to fit reference image */
            grid-auto-rows: minmax(0, 1fr);
            grid-gap: 0;
        }

        /* Styling for the grid cells */
        .cell {
            background-color: #fff;
            border: 1px solid #999;
            cursor: pointer;
            opacity: 0.7; /* Set opacity to 0.7 (70%) */
        }

        /* Styling for the grid cells when they're clicked */
        .cell.clicked {
            background-color: #000;
        }

        /* Additional styling for the grid cells when reference image is provided */
        .reference-image {
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
        }

        .grid {
          width: max-content;
        }
    </style>
</head>
<body>
    <h1>Blanket Pattern Designer</h1>

    <!-- Input grid -->
    <div class="grid" id="grid">
    </div>

    <!-- Input grid size -->
    <div class="settings-box">
    <label for="rows">Rows:</label>
    <input type="number" id="rows" name="rows" min="1" max="20" value="8">
    <label for="cols">Columns:</label>
    <input type="number" id="cols" name="cols" min="1" max="20" value="8">

    <!-- Input cell size -->
    <label for="cellSize">Cell Size (pixels):</label>
    <input type="number" id="cellSize" name="cellSize" min="10" max="100" value="30">

    <!-- Input reference image -->
    <label for="referenceImage">Reference Image:</label>
    <input type="file" id="referenceImage" name="referenceImage">
    </div>

    <!-- Button to export the image -->
    <button onclick="exportImage()">Download Image</button>

    <!-- JavaScript for generating the grid and setting reference image -->
    <script>
        // Define initial state of cells
        const cellState = {};

        // Generate the grid when the page loads
        document.addEventListener("DOMContentLoaded", function(event) {
            generateGrid();
        });

        // Generate the grid based on the input values
        function generateGrid() {
            const rows = document.getElementById("rows").value;
            const cols = document.getElementById("cols").value;
            const cellSize = document.getElementById("cellSize").value;
            const grid = document.getElementById("grid");
            grid.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;

            // Clear the grid
            grid.innerHTML = '';

            // Create new cells
            for (let i = 0; i < rows; i++) {
                for (let j = 0; j < cols; j++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.style.width = cell.style.height = `${cellSize}px`;
                    cell.addEventListener('click', () => {
                        cell.classList.toggle('clicked');
                        // Update cell state
                        cellState[`${i}-${j}`] = cell.classList.contains('clicked');
                    });
                    // Restore previous cell state if exists
                    if (cellState[`${i}-${j}`]) {
                        cell.classList.add('clicked');
                    }
                    grid.appendChild(cell);
                }
            }

            // Set reference image as background of the grid
            const referenceImage = document.getElementById("referenceImage").files[0];
            if (referenceImage) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    grid.style.backgroundImage = `url(${event.target.result})`;
                    grid.classList.add('reference-image');
                };
                reader.readAsDataURL(referenceImage);
            }
        }

        // Update the grid when the input values change
        document.getElementById("rows").addEventListener('change', generateGrid);
        document.getElementById("cols").addEventListener('change', generateGrid);
        document.getElementById("cellSize").addEventListener('change', generateGrid);
        document.getElementById("referenceImage").addEventListener('change', generateGrid);
    </script>

    <!-- JavaScript for exporting the image -->
		<script>
				function exportImage() {
						const gridSize = document.getElementById("rows").value;
						const grid = document.getElementById("grid");
						const canvas = document.createElement('canvas');
						const context = canvas.getContext('2d');
						const cellWidth = parseFloat(window.getComputedStyle(grid.children[0]).getPropertyValue('width'));
						const cellHeight = parseFloat(window.getComputedStyle(grid.children[0]).getPropertyValue('height'));
						canvas.width = gridSize * cellWidth;
						canvas.height = gridSize * cellHeight;

						// Clear the canvas
						context.clearRect(0, 0, canvas.width, canvas.height);

						// Draw grid cells
						for (let i = 0; i < gridSize; i++) {
								for (let j = 0; j < gridSize; j++) {
										const cell = grid.children[i * gridSize + j];
										const color = cell.classList.contains('clicked') ? '#000' : '#fff';
										context.fillStyle = color;
										context.fillRect(j * cellWidth, i * cellHeight, cellWidth, cellHeight);
								}
						}

						// Draw grid lines
						context.strokeStyle = 'rgba(0, 0, 0, 0.5)'; // Adjust transparency if needed
						context.lineWidth = 1;
						for (let i = 1; i < gridSize; i++) {
								// Horizontal lines
								context.beginPath();
								context.moveTo(0, i * cellHeight);
								context.lineTo(canvas.width, i * cellHeight);
								context.stroke();
								// Vertical lines
								context.beginPath();
								context.moveTo(i * cellWidth, 0);
								context.lineTo(i * cellWidth, canvas.height);
								context.stroke();
						}

						// Create a download link
						const downloadLink = document.createElement('a');
						downloadLink.href = canvas.toDataURL();
						downloadLink.download = 'image.png';

						// Simulate a click on the download link
						downloadLink.click();
				}
		</script>
</body>
</html>
