<!DOCTYPE html>
<html>
<head>
    <title>1-Bit Image Designer</title>
    <style>
        /* Basic styling for the grid */
        .grid {
            display: grid;
            background-color: #ccc;
        }

        /* Styling for the grid cells */
        .cell {
            width: 30px;
            height: 30px;
            background-color: #fff;
            border: 1px solid #999;
            cursor: pointer;
        }

        /* Styling for the grid cells when they're clicked */
        .cell.clicked {
            background-color: #000;
        }
    </style>
</head>
<body>
    <h1>1-Bit Image Designer</h1>

    <!-- Input grid size -->
    <label for="rows">Rows:</label>
    <input type="number" id="rows" name="rows" min="1" max="20" value="8">
    <label for="cols">Columns:</label>
    <input type="number" id="cols" name="cols" min="1" max="20" value="8">

    <!-- Input grid -->
    <div class="grid" id="grid">
    </div>

    <!-- JavaScript for generating the grid -->
    <script>
        // Generate the grid when the page loads
        document.addEventListener("DOMContentLoaded", function(event) {
            generateGrid();
        });

        // Generate the grid based on the input values
        function generateGrid() {
            const rows = document.getElementById("rows").value;
            const cols = document.getElementById("cols").value;
            const grid = document.getElementById("grid");
            grid.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;

            // Clear the grid
            grid.innerHTML = '';

            // Create new cells
            for (let i = 0; i < rows; i++) {
                for (let j = 0; j < cols; j++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.addEventListener('click', () => {
                        cell.classList.toggle('clicked');
                    });
                    grid.appendChild(cell);
                }
            }
        }

        // Update the grid when the input values change
        document.getElementById("rows").addEventListener('change', generateGrid);
        document.getElementById("cols").addEventListener('change', generateGrid);
    </script>

    <!-- JavaScript for exporting the image -->
    <script>
        function exportImage() {
            const gridSize = document.getElementById("rows").value;
            const grid = document.getElementById("grid");
            const canvas = document.createElement('canvas');
            const context = canvas.getContext('2d');
            const cellWidth = parseFloat(window.getComputedStyle(grid.children[0]).getPropertyValue('width'));
            const cellHeight = parseFloat(window.getComputedStyle(grid.children[0]).getPropertyValue('height'));
            canvas.width = gridSize * cellWidth;
            canvas.height = gridSize * cellHeight;

            for (let i = 0; i < gridSize; i++) {
                for (let j = 0; j < gridSize; j++) {
                    const cell = grid.children[i * gridSize + j];
                    const color = cell.classList.contains('clicked') ? '#000' : '#fff';
                    context.fillStyle = color;
                    context.fillRect(j * cellWidth, i * cellHeight, cellWidth, cellHeight);
                }
            }

            const dataURL = canvas.toDataURL();
            console.log(dataURL);
            // You can send this dataURL to a server or use it for any other purpose.
        }
    </script>

    <!-- Button to export the image -->
    <button onclick="exportImage()">Export Image</button>
</body>
</html>
